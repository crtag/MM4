//
//  MM4+Electrostatic.swift
//
//
//  Created by Philip Turner on 10/19/23.
//

import Foundation
import OpenMM

/// To isolate the electrostatic force from the switching function, we create
/// two forces that end up fused into the same group.
class MM4ElectrostaticForce: MM4Force {
  static var prefactor: Double {
    let vacuumPermittivity: Double = 8.8541878128e-12
    let coulombConstant = 1 / (4 * Double.pi * vacuumPermittivity)
    var prefactor = coulombConstant
    
    let coulombsPerElementaryCharge: Double = 801088317 / 5e27
    prefactor *= coulombsPerElementaryCharge * coulombsPerElementaryCharge
    
    let metersPerNm: Double = 1e-9
    prefactor /= metersPerNm
    
    // Units: J -> aJ -> kJ/mol
    let AJPerJ: Double = 1e18
    prefactor *= AJPerJ * MM4KJPerMolPerAJ
    return prefactor
  }
  
  static var reactionFieldConstants: (K: Double, C: Double) {
    // The dielectric constant is 5.7, the same as solid diamond. The actual
    // dielectric may fluctuate between 0 (vacuum) and greater than 10.0, for
    // random patches of moissanite or heteroatoms.
    //
    // Testing whether there's a sharp cutoff as stated on Wikipedia:
    // https://www.desmos.com/calculator/zgmywq7xui
    //
    // No; the function has an exact minimum at the cutoff distance. Force acts
    // just like if energy were conserved. OpenMM adds a correction term (C) to
    // make the potential energy be zero at the cutoff.
    let dielectricConstant: Double = 5.7
    let cutoff = MM4NonbondedForce.cutoff
    
    // Source (from OpenMM C++ code):
    // double reactionFieldK = pow(force.getCutoffDistance(), -3.0)*(force.getReactionFieldDielectric()-1.0)/(2.0*force.getReactionFieldDielectric()+1.0);
    // double reactionFieldC = (1.0 / force.getCutoffDistance())*(3.0*force.getReactionFieldDielectric())/(2.0*force.getReactionFieldDielectric()+1.0);
    let reactionFieldK = pow(cutoff, -3) * (dielectricConstant - 1)
    /**/                                 / (2 * dielectricConstant + 1)
    let reactionFieldC = (1 / cutoff) * (3 * dielectricConstant)
    /**/                               / (2 * dielectricConstant + 1)
    return (reactionFieldK, reactionFieldC)
  }
  
  required init(system: MM4System) {
    // Minimized code from OpenMM reaction field kernel. Note that the r^-3
    // scaling force is corrected to r^-2 in the calling kernel.
    /*
    {
    #ifdef USE_CUTOFF
      unsigned int includeInteraction = (!isExcluded && r2 < CUTOFF_SQUARED);
      real tempForce = 0.0f;
      const real prefactor = ONE_4PI_EPS0*CHARGE1*CHARGE2;
      tempForce += prefactor*(invR - 2.0f*REACTION_FIELD_K*r2);
      tempEnergy += includeInteraction ? prefactor*(invR + REACTION_FIELD_K*r2 - REACTION_FIELD_C) : 0;
      dEdR += includeInteraction ? tempForce*invR*invR : 0;
    }
     */
    let prefactor = MM4ElectrostaticForce.prefactor
    let (K, C) = MM4ElectrostaticForce.reactionFieldConstants
    let force = OpenMM_CustomNonbondedForce(energy: """
      \(prefactor) * charge1 * charge2 * (
        1 / r + \(K) * r^2 - \(C)
      );
      """)
    force.addPerParticleParameter(name: "charge")
    force.nonbondedMethod = .cutoffNonPeriodic
    force.cutoffDistance = MM4NonbondedForce.cutoff
    
    let array = OpenMM_DoubleArray(size: 1)
    let atoms = system.parameters.atoms
    for atomID in atoms.atomicNumbers.indices {
      var charge: Double = 0
      if let parameters = atoms.extendedParameters[atomID] {
        charge = Double(parameters.charge)
      }
      
      // Units: elementary charge
      array[0] = charge
      force.addParticle(parameters: array)
    }
    
    force.createExclusionsFromBonds(system.bondPairs, bondCutoff: 2)
    super.init(forces: [force], forceGroup: 1)
  }
}

// ========================================================================== //
//
// Create a counterforce at short range that corrects for 1/2 of a
// dipole falling on the 1-3 border. In the paper about fluorine, Allinger
// mentioned some 1-4 fluorines on fluoroethane having a repulsive effect
// from their dipoles. This suggests 1-4 interactions ("sclfac = 1.000"?) are
// included, but perhaps not the 1-3 interactions.
//
// Create a different force to handle the dipole-dipole interactions along
// every possible path between two bonds, which wasn't fully handled when
// recording the 1-3/1-4 nonbonded exceptions. In other words, enumerate every
// torsion out there and create a nonbonded exception force for it.
//
// Find all the bonds on atom 1 that are present in a torsion. Repeat the same
// process for atom 4. Then, compute an O(n^2) algorithm on all of the dipole
// permutations ('n' in number of dipoles, often n = 2-3). A final force
// computes a charge-charge interaction with the partial charge generated by
// the involved bonds omitted.
//
// ========================================================================== //
//
// More efficient alternative: instead of projecting onto dipoles, factor in
// only the charges on 1-3 atoms that result from the dipoles present in 1-4
// atoms. This has an effect similar to scaling those atoms' charge-charge
// interactions by 0.5 in conventional force fields. It reproduces the same
// dynamics to a first-order approximation, but avoids something potentially as
// costly as torsion forces.
//
// Also, from the paper on induced dipoles:
//
// > It was later found that distances among interacting
// > centers, d, need to be empirically adjusted to give
// > better results in the induced dipole moments cal-
// > culations. They are adjusted as follows: (a) for all
// > nongeminal cases, 1,4 interactions and higher, all
// > distances are increased by a factor of 1.3,
// >     d = 1.3 * d
// > The need of using this scaling factor can be ratio-
// > nalized by the fact that we use midpoints of bonds,
// > instead of atoms, as interacting centers. Two ap-
// > proaches are basically the same when two dipoles
// > are far away from each other, however, the scaling
// > factor 1.3 is needed when two dipoles are very close
// > to each other. This scaling factor indicates that the
// > real source of polarization in the molecules might
// > better be considered to be at the atoms instead of
// > at the bonds. (b) For geminal cases, such as the 1,3
// > interaction in the moiety of x-Z-y, if one and ONLY
// > one of the two atoms attached to Z (x or y) is hy-
// > drogen, then the distances are increased by a factor
// > of 3.0,
// >     d = 3.0 ∗ d
// > otherwise the distances are increased by a factor
// > of 2.0,
// >     d = 2.0 ∗ d
// > The reason for these rather large scaling factors for
// > geminal cases is that the idealized dipole interaction
// > tensor is no longer valid when two dipoles are lo-
// > cated so close to one another.
//
// Summary: when two dipoles are part of the same angle, the dipole-dipole
// interaction model no longer applies **with respect to induced polarization**.
// At the distance of 1,4, there is still distortion from modeling atoms as two
// dipoles. This suggests that a partial charge model, where the partial charge
// centers are close to the nuclei, is qualitatively better than the
// dipole-dipole interaction formula **with respect to induced polarization**.
//
// The electrostatic exception force is not involving any costly induced
// dipoles. But, the insight may justify using the partial charges not only for
// performance, but also for correctness. This would be a bit different than
// existing forcefields that omit 1,3 and scale 1,4 by a half. It is like
// scaling 1,3 by a half and 1,4 by the full amount. However, both MM3 and MM4
// seem to be parameterized with the dipole-dipole approach with zero
// attenuation for 1,4 interactions.
//
// Update: dipole-dipole forces will be used initially, rather than
//         charge-charge forces
//
// ========================================================================== //

// In the future, an optimization could fuse the O(bonds^2) interactions into a
// single kernel invocation. This would also pre-compute the O(bonds^2) partial
// charge interactions to "undo" the regular electrostatic force.
class MM4ElectrostaticExceptionForce: MM4Force {
  required init(system: MM4System) {
    // Equation for dipole-dipole interaction:
    // https://janheyda.files.wordpress.com/2015/08/electrostatics-multipoles.pdf
    //
    // debye = 0.02081943 electron-nm
    // charge-charge = q1 q2 / 4 pi epsilon_0
    // dipole-dipole = mu1 mu2 / 4 pi epsilon_0 * (
    //   normalize(p1 - p2) * normalize(p4 - p3) + ...
    //
    fatalError("Not implemented.")
    
    // For each bond-bond interaction, compute the projected charge onto each
    // 1,4 atom and undo it.
  }
}
